-- // Configurations \\ --
_G.Configurations = {
    -- KeyBinds --
    ToggleKeyBind = Enum.KeyCode.H,
    PredictionKeyBind = Enum.KeyCode.J;

    -- Settings --
    FOV = 500;  -- FOV değeri 500 olarak ayarlandı

    -- Filters --
    Filters = {
        "Player1"
    };
    FilterType = "Whitelist";

    -- Aimbot sensitivity --
    Gyro = {
        Power = 20000,  -- Gyro gücü 20000 olarak ayarlandı
        Dampening = 0,  -- Damping değeri
    };
}

-- // Constants \\ --
-- [ Services ] --
local Services = setmetatable({}, {__index = function(Self, Index)
    local NewService = game:GetService(Index)
    if NewService then
        Self[Index] = NewService
    end
    return NewService
end})

-- [ Modules ] --
local Drawing = loadstring(game:HttpGet("https://raw.githubusercontent.com/iHavoc101/Genesis-Studios/main/Modules/DrawingAPI.lua", true))()

-- [ Game Settings ] --
local GameSettings = UserSettings():GetService("UserGameSettings")

-- [ LocalPlayer ] --
local LocalPlayer = Services.Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- [ Interface ] --
local FOVCircle = Drawing.new("Circle", {
    Thickness = 2,  -- Kenarlık kalınlığı
    Color = Color3.fromRGB(255, 0, 0),  -- Kırmızı renk
    Filled = false,  -- İç dolgu olmayacak
    Transparency = 1,  -- Şeffaf
    Radius = _G.Configurations.FOV,
    Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)  -- Ekranın ortasında sabit konum
})

local Target = Drawing.new("Triangle", {
    Thickness = 2,  -- Kenarlık kalınlığı
    Color = Color3.fromRGB(255, 0, 0),  -- Kırmızı renk
    Filled = false,  -- İç dolgu olmayacak
    Visible = false,  -- Başlangıçta görünmez
})

-- Üçgenin orijinal konumu
local OriginalTrianglePosition = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

-- // Variables \\ --
local SilentAimToggle = true
local PredictionMultiplier = 5

local ClosestTarget = nil

local BodyGyro = Instance.new("BodyGyro")
BodyGyro.P = _G.Configurations.Gyro.Power
BodyGyro.D = _G.Configurations.Gyro.Dampening
BodyGyro.MaxTorque = Vector3.new(0, math.huge, 0)

-- // Functions \\ --
local function ValidCharacter(Character)
    return Character and (Character:FindFirstChildWhichIsA("Humanoid") and Character:FindFirstChildWhichIsA("Humanoid").Health ~= 0) or false
end

local function GetTarget(Distance, IgnoreList)
    local Closest = nil
    local Position = Vector2.new(0, 0)
    local ShortestDistance = Distance or math.huge

    for i,v in ipairs(Services.Players:GetPlayers()) do
        if _G.Configurations.FilterType == "Whitelist" and table.find(_G.Configurations.Filters, v.Name) then
            continue
        elseif _G.Configurations.FilterType == "Blacklist" and table.find(_G.Configurations.Filters, v.Name) == nil then
            continue
        end

        if v ~= LocalPlayer and ValidCharacter(v.Character) then
            local ViewportPosition, OnScreen = Camera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local Magnitude = (Vector2.new(ViewportPosition.X, ViewportPosition.Y) - Services.UserInputService:GetMouseLocation()).Magnitude

            if OnScreen and Magnitude < ShortestDistance and #Camera:GetPartsObscuringTarget({v.Character.PrimaryPart.Position}, {LocalPlayer.Character, v.Character}) <= 1 then
                Closest = v
                Position = ViewportPosition
                ShortestDistance = Magnitude
            end
        end
    end

    -- FOV dışına çıkarsa kilitlenmeyi devre dışı bırak
    if Closest and ShortestDistance <= _G.Configurations.FOV / 2 then
        return Closest, Position, ShortestDistance
    else
        return nil, Vector2.new(0, 0), math.huge
    end
end

-- // Events \\ --
Services.RunService.Heartbeat:Connect(function()
    -- Aim --
    local Closest, Position, Distance = GetTarget(_G.Configurations.FOV)
    ClosestTarget = Closest
    
    if Closest then
        BodyGyro.Parent = LocalPlayer.Character.PrimaryPart

        local Velocity = Closest.Character.PrimaryPart:GetVelocityAtPosition(Closest.Character.PrimaryPart.Position)
        local Prediction = (Velocity * Vector3.new(1, 0, 1)).Unit * PredictionMultiplier
        if Velocity.Magnitude == 0 then
            Prediction = Vector3.new(0, 0, 0)
        end

        if SilentAimToggle and Prediction.Magnitude >= 0 then
            BodyGyro.CFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Closest.Character.PrimaryPart.Position + Prediction)
        else
            BodyGyro.Parent = nil
        end

        -- Üçgeni hedefin konumuna ayarla ve görünür yap
        Target.PointA = Vector2.new(Position.X - 25, Position.Y + 25)
        Target.PointB = Vector2.new(Position.X + 25, Position.Y + 25)
        Target.PointC = Vector2.new(Position.X, Position.Y - 25)
        Target.Visible = true
    else
        BodyGyro.Parent = nil
        Target.Visible = false  -- Üçgeni görünmez yap
    end

    -- Üçgenin konumunu ayarla
    if ClosestTarget and SilentAimToggle then
        -- Hedef varsa ve silent aim aktifse, üçgeni hedefin konumuna ayarla
        local hedefPozisyon = Camera:WorldToViewportPoint(ClosestTarget.Character.PrimaryPart.Position)
        Target.Position = Vector2.new(hedefPozisyon.X, hedefPozisyon.Y)
    else
        -- Hedef yoksa veya silent aim kapalıysa, üçgeni kameranın bakış yönüne doğru sabit konumda tut
        local mousePozisyon = Services.UserInputService:GetMouseLocation()
        local centerViewport = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        local direction = (mousePozisyon - centerViewport).unit
        local distance = (mousePozisyon - centerViewport).magnitude

        -- Eğer tıklanan nokta FOV içindeyse üçgeni o noktaya doğru hareket ettir
        if distance <= _G.Configurations.FOV / 2 then
            Target.Position = mousePozisyon
        else
            -- Tıklanan nokta FOV dışında ise, üçgeni kameranın bakış yönüne doğru sabit konumda tut
            Target.Position = centerViewport + direction * (_G.Configurations.FOV / 2)
        end
    end

    -- Drawing --
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end)

-- // Binds \\ --
Services.RunService:BindToRenderStep("SetCameraRotation", Enum.RenderPriority.Camera.Value + 1, function()
    if SilentAimToggle and ClosestTarget then
        GameSettings.RotationType = Enum.RotationType.CameraRelative
    end
end)

Services.ContextActionService:BindAction("ToggleSilent", function(actionName, InputState, inputObject)
    if InputState == Enum.UserInputState.End then
        return
    end
    SilentAimToggle = not SilentAimToggle
    Services.StarterGui:SetCore("SendNotification", {
        Title = "Silent Aim",
        Text = "Enabled: " .. tostring(SilentAimToggle),
        Icon = SilentAimToggle and "rbxassetid://6031068430" or "rbxassetid://6031068429",
        Duration = 5,
        Button1 = "Dismiss"
    })
end, false, _G.Configurations.ToggleKeyBind)

Services.ContextActionService:BindAction("TogglePrediction", function(actionName, InputState, inputObject)
    if InputState == Enum.UserInputState.End then
        return
    end
    PredictionMultiplier = PredictionMultiplier == 5 and 20 or 5
    Services.StarterGui:SetCore("SendNotification", {
        Title = "Prediction",
        Text = "Enabled: " .. tostring(PredictionMultiplier == 20),
        Icon = "rbxassetid://6034287516",
        Duration = 5,
        Button1 = "Dismiss"
    })
end, false, _G.Configurations.PredictionKeyBind)

return {}
